" 2gmonの設定を参照
" Vimの設定{{{
" ファイルエンコードの設定
set enc=utf-8
set fenc=utf-8
set fencs=utf-8,iso-2022-jp,euc-jp,sjis,jis
set fileformats=unix,dos,mac

set number          " 行番号表示
set showtabline=2   " タブページ常に表示
set noswapfile      " スワップファイル作らない
set nobackup        " バックアップファイル作らない
set showmatch       " 対応する括弧の表示
" デフォルトインデント
set autoindent smartindent
set shiftwidth=4
set expandtab
set tabstop=4
set backspace=indent,eol,start  " Backspaceで色々削除可能
set showmode                     " 現在のモードを表示
" 不可視文字表示
set list
set listchars=tab:>-,trail:-
set whichwrap=b,s,h,l           " カーソルが行頭，行末で止まらない
" 全角文字をちゃんとあつかう
if has('gui_running')
  set ambiwidth=double
endif
" ファイルタイプ別設定
filetype on
filetype indent on
filetype plugin on
syntax on                       " syntaxカラー有効
syntax sync fromstart
set background=dark
colorscheme desert
set nrformats=alpha,octal,hex     " Ctrl+A, Ctrl+Xの加算減算で認識する基数
set wildmode=list,full            " exコマンド時，Tabで補完候補一覧
set undolevels=10000              " Undoの回数制限
" ステータスラインの設定
set statusline&
set statusline=%<%F\ %m%r%h%w%y%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}[POS=%l,%v,%p%%]
set statusline+=%{fugitive#statusline()}
" set statusline+=%=%{g:NyanModoki()}
set laststatus=2
" let g:nyan_modoki_select_cat_face_number = 4
set showcmd               " 入力中のコマンド表示
setlocal bufhidden=delete " バッファ閉じた時に削除
set clipboard=unnamed,autoselect "無名レジスタを*レジスタにも入るように
nnoremap <ESC><ESC> :nohlsearch<CR> "<ESC><ESC>でハイライトオフ
" ,ssでカレントディレクトリをターミナルで開く
function! s:OpenMlterm()
  silent execute '!mlterm &'
endfunction
nnoremap <silent> ,ss :<C-u>call <SID>OpenMlterm()<CR>
nnoremap <silent> <C-c> :<C-u>lcd %:p:h<CR>
" 検索位置表示
nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
nmap * <Plug>(anzu-star-with-echo)
nmap # <Plug>(anzu-sharp-with-echo)
cnoremap <C-a> <Home>
"" コマンドモードの設定
" 一文字戻る
cnoremap <C-b> <Left>
" カーソルの下の文字を削除
cnoremap <C-d> <Del>
" 行末へ移動
cnoremap <C-e> <End>
" 一文字進む
cnoremap <C-f> <Right>
" コマンドライン履歴を一つ進む
cnoremap <C-n> <Down>
" コマンドライン履歴を一つ戻る
cnoremap <C-p> <Up>
" 前の単語へ移動
cnoremap <M-b> <S-Left>
" 次の単語へ移動
cnoremap <M-f> <S-Right>
"}}}

" CTRL-hjklでウィンドウ移動
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <C-h> <C-w>h

" Uniteの設定{{{
let g:unite_source_menu_menus = {}
let g:unite_enable_start_insert=1 "入力モードで開始する
let g:unite_source_file_mru_limit=500 " 最近使ったファイルの最大値
let g:unite_source_history_yank_enable=1 " history/yankの有効化
"" ESC2回押すと終了する
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>q<CR>
au FileType unite imap     <silent> <buffer> <C-w>      <Plug>(unite_delete_backward_path)
"" バッファ一覧
noremap <silent> ,ub :Unite buffer<CR>
"" ファイル一覧
noremap <silent> ,uf :UniteWithBufferDir -buffer-name=file file<CR>
"" 最近使ったファイルの一覧
noremap <silent> ,ur :Unite -buffer-name=register register<CR>
"" 最近使ったファイルの一覧
noremap <silent> ,um :Unite file_mru<CR>
"" 常用
noremap <silent> ,uu :Unite buffer file_mru<CR>
"" 全部
noremap <silent> ,ua :UniteWithBufferDir -buffer-name=files buffer file_mru<CR>
"" Colorscheme
noremap <silent> ,ucs :<C-u>Unite -no-quit -auto-preview colorscheme<CR>
"" history/yank
noremap <silent> ,uhy :<C-u>Unite history/yank<CR>
"" Tab一覧
noremap <silent> ,ut :<C-u>Unite tab:no-current<CR>
"" Line
noremap <silent> ,ul :<C-u>Unite line<CR>
noremap <silent> ,uL :<C-u>Unite line -no-quit<CR>
"" Outline
noremap <silent> ,uo :<C-u>Unite -no-start-insert -winheight=20 outline<CR>
"" help
noremap <silent> ,uhl :<C-u>Unite -winheight=40 help<CR>
"" unite-tag
noremap <silent> ,ug] :<C-u>execute 'Unite tag:' . expand('<cword>')<CR>
"" listing Project file
nnoremap <silent> ,up :<C-u>call <SID>unite_project('-start-insert')<CR>
function! s:unite_project(...)
  let opts = (a:0 ? join(a:000, ' ') : '')
  let dir = unite#util#path2project_directory(expand('%'))
  execute 'Unite' opts 'file_rec:' . dir
endfunction
"" encode変更
let g:unite_source_menu_menus.enc = {
      \ 'description': 'set enc=...',
      \ }
let g:unite_source_menu_menus.enc.candidates = {
      \ 'euc-jp': 'edit ++enc=euc-jp',
      \ 'utf-8' : 'edit ++enc=utf-8',
      \ }
function g:unite_source_menu_menus.enc.map(key, value)
  return {
        \ 'word': a:key, 'kind': 'command',
        \ 'action__command': a:value,
        \ }
endfunction
nnoremap <silent> ,uenc :<C-u>Unite menu:enc<CR>
"" fileencode変更
let g:unite_source_menu_menus.fenc = {
      \ 'description': 'set fenc=...',
      \ }
let g:unite_source_menu_menus.fenc.candidates = {
      \ 'euc-jp': 'set fenc=euc-jp',
      \ 'utf-8' : 'set fenc=utf-8',
      \ }
function g:unite_source_menu_menus.fenc.map(key, value)
  return {
        \ 'word': a:key, 'kind': 'command',
        \ 'action__command': a:value,
        \ }
endfunction
nnoremap <silent> ,ufenc :<C-u>Unite menu:fenc<CR>
"" encode変更
let g:unite_source_menu_menus.ff = {
      \ 'description': 'set ff=...',
      \ }
let g:unite_source_menu_menus.ff.candidates = {
      \ 'unix': 'set ff=unix',
      \ 'mac' : 'set ff=mac',
      \ 'dos' : 'set ff=dos',
      \ }
function g:unite_source_menu_menus.ff.map(key, value)
  return {
        \ 'word': a:key, 'kind': 'command',
        \ 'action__command': a:value,
        \ }
endfunction
nnoremap <silent> ,uff :<C-u>Unite menu:ff<CR>
"" よく編集するファイル
let g:unite_source_menu_menus = {
      \ "edit_frequently" : {
      \ "description" : "edit frequently",
      \ "command_candidates" : [
      \ ["edit vimrc", "edit $MYVIMRC"],
      \ ["edit gvimrc", "edit $MYGVIMRC"],
      \ ["edit vimperatorrc", "edit ~/.vimperatorrc"],
      \ ],
      \ },
      \}
nnoremap <silent> ,uef :<C-u>Unite menu:edit_frequently<CR>
"" Rails
nnoremap ,uR :<C-u>Unite rails/
"" Gtags
nnoremap <silent> ,ugg :<C-u>Unite gtags/context<CR>
"" DWMで開くアクション追加
let s:action = {
      \ 'description' : 'new dwm',
      \ 'is_selectable' : 1,
      \ }
function! s:action.func(candidates)"{{{
  for l:candidate in a:candidates
    call unite#util#command_with_restore_cursor('rightbelow split')
    call unite#take_action('open', candidate)
    call DWM_Focus()
  endfor
endfunction"}}}
call unite#custom_action('openable', 'dwm_new', s:action)
unlet s:action
"}}}

